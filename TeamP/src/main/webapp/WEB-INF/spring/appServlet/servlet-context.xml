<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources location="/WEB-INF/views/include/" mapping="include/**" />
	<resources location="/WEB-INF/views/video/" mapping="video/**" />
	<resources location="/WEB-INF/views/images/" mapping="/images/**" />
	<resources location="/WEB-INF/views/json/" mapping="/json/**" />
	<resources location="/WEB-INF/views/ckeditor/" mapping="/ckeditor/**" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 스프링 빈을 태그로 등록하지 않고 자동으로 검색(auto scan) --> 
	<context:component-scan base-package="com.example.TeamP" />
	
	<!-- 파일업로드에 필요한 bean -->
	<beans:bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

		<!-- 파일업로드 최대 용량(byte) -->
		<beans:property name="maxUploadSize" value="10485760" />
	</beans:bean>
	
	<!-- 인터셉터 빈을 등록 -->
	<beans:bean id="loginInterceptor" class="com.example.TeamP.intercepter.LoginInterceptor">
	</beans:bean>
	<beans:bean id="adminInterceptor" class="com.example.TeamP.intercepter.AdminInterceptor">
	</beans:bean>
	
	<!-- 인터셉터 호출을 위한 url mapping -->
	<!-- Waffle의 모든 컨텐츠들은 회원만 이용이 가능하다. -->
	<interceptors>
		<interceptor>
			<mapping path="/waffleFavor/list.do"/>
			<mapping path="/waffleContent/drama.do"/>
			<mapping path="/waffleContent/movie.do"/>
			<mapping path="/waffleContent/detail_view.do"/>
			<mapping path="/waffleContent/main_view.do"/>
			<mapping path="/waffleBoard/list.do"/>
			<mapping path="/waffleBoard/view.do"/>
			<mapping path="/waffleBoard/write.do"/>
			<mapping path="/waffleBoard/edit.do"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/waffleContent/admin_edit_view.do/{title}"/>
			<mapping path="/waffleContent/admin_delete.do/{title}"/>
			<mapping path="/waffleContent/admin_insert_view.do"/>
			<beans:ref bean="adminInterceptor"/>
		</interceptor>
		
		<!-- 로그인, 로그아웃 후 뒤로가기 방지 목적으로 캐시 삭제 / 참고 : https://prettymucho.tistory.com/4 -->
		<interceptor>
			<mapping path="/**/*"/>
			<beans:bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
				<beans:property name="cacheSeconds" value="0"/>
				<beans:property name="useExpiresHeader" value="true" />
				<beans:property name="useCacheControlHeader" value="true" />
				<beans:property name="useCacheControlNoStore" value="true" />
			</beans:bean>
		</interceptor>
	</interceptors>
	
	
</beans:beans>
